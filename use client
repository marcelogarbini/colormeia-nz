"use client"

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Image as ImageIcon, Sun, Smile, UploadCloud } from "lucide-react"
import { useState } from "react"
import Image from "next/image"
import { useRouter } from "next/navigation"

// 1. Definindo o schema de validação com Zod
const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
const ACCEPTED_IMAGE_TYPES = ["image/jpeg", "image/jpg", "image/png", "image/webp"];

const analysisFormSchema = z.object({
  email: z.string().email({ message: "Por favor, insira um email válido." }),
  photo: z
    .any()
    .refine((files) => files?.length == 1, "A foto é obrigatória.")
    .refine((files) => files?.[0]?.size <= MAX_FILE_SIZE, `O tamanho máximo é 5MB.`)
    .refine(
      (files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),
      "Apenas formatos .jpg, .jpeg, .png e .webp são aceitos."
    ),
})

export default function AnalysisPage() {
  const [preview, setPreview] = useState<string | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const router = useRouter()

  const form = useForm<z.infer<typeof analysisFormSchema>>({
    resolver: zodResolver(analysisFormSchema),
    defaultValues: {
      email: "",
    },
  })

  // 2. Função que será chamada no envio do formulário
  async function onSubmit(values: z.infer<typeof analysisFormSchema>) {
    setIsSubmitting(true)
    
    // Simulação do envio para o backend
    console.log("Enviando para o backend:", {
      email: values.email,
      photoName: values.photo[0].name,
    })

    // AQUI você fará a chamada real para sua API
    // const formData = new FormData()
    // formData.append("email", values.email)
    // formData.append("photo", values.photo[0])
    // const response = await fetch("/api/analise", { method: "POST", body: formData })

    // Simulando um tempo de espera e navegando para a próxima página
    setTimeout(() => {
      setIsSubmitting(false)
      // Navega para a tela de carregamento/análise
      router.push("/analise/processando") 
    }, 2000)
  }

  const handlePhotoChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    } else {
      setPreview(null);
    }
  }

  return (
    <div className="container max-w-2xl py-10">
      <Card>
        <CardHeader>
          <CardTitle className="text-3xl font-bold">Faça sua Análise</CardTitle>
          <CardDescription>Siga os passos abaixo para receber sua paleta de cores personalizada.</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="mb-6 p-4 bg-muted/50 rounded-lg border">
            <h3 className="font-semibold mb-3">Dicas para a foto ideal:</h3>
            <ul className="space-y-2 text-sm text-gray-700">
              <li className="flex items-center gap-2"><Sun className="h-4 w-4 text-primary" /> Use luz natural, de frente para uma janela.</li>
              <li className="flex items-center gap-2"><Smile className="h-4 w-4 text-primary" /> Rosto neutro, sem maquiagem ou óculos.</li>
              <li className="flex items-center gap-2"><ImageIcon className="h-4 w-4 text-primary" /> Fundo de cor neutra (ex: parede branca).</li>
            </ul>
          </div>

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              {/* Campo de Upload */}
              <FormField
                control={form.control}
                name="photo"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Sua Selfie</FormLabel>
                    <FormControl>
                      <div className="relative flex flex-col items-center justify-center w-full h-48 border-2 border-dashed rounded-lg cursor-pointer hover:border-primary">
                        {preview ? (
                          <Image src={preview} alt="Pré-visualização da foto" layout="fill" objectFit="contain" className="rounded-lg" />
                        ) : (
                          <div className="flex flex-col items-center justify-center pt-5 pb-6">
                            <UploadCloud className="w-8 h-8 mb-2 text-gray-500" />
                            <p className="mb-1 text-sm text-gray-500">
                              <span className="font-semibold">Clique para enviar</span> ou arraste e solte
                            </p>
                            <p className="text-xs text-gray-500">PNG, JPG, JPEG ou WEBP (MAX. 5MB)</p>
                          </div>
                        )}
                        <Input 
                           id="photo-upload"
                           type="file" 
                           className="absolute top-0 left-0 w-full h-full opacity-0 cursor-pointer"
                           accept={ACCEPTED_IMAGE_TYPES.join(",")}
                           onChange={(e) => {
                             field.onChange(e.target.files);
                             handlePhotoChange(e);
                           }}
                        />
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {/* Campo de Email */}
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Seu melhor e-mail</FormLabel>
                    <FormControl>
                      <Input placeholder="seuemail@exemplo.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <CardFooter className="px-0 pt-6">
                <Button type="submit" className="w-full" disabled={isSubmitting}>
                  {isSubmitting ? "Analisando..." : "Analisar Minha Foto"}
                </Button>
              </CardFooter>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  )
}
